{"ast":null,"code":"var _jsxFileName = \"E:\\\\TYProject\\\\mobiletracker\\\\mobiletracker\\\\frontend\\\\src\\\\components\\\\GoogleMapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { GoogleMap, useJsApiLoader, Marker } from '@react-google-maps/api';\nimport GPSLiveLocation from '../components/GPSLiveLocation'; // Adjusted import path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '750px',\n  border: '0',\n  marginTop: '20px'\n};\nconst center = {\n  lat: 18.4597,\n  // Swargate, Pune latitude\n  lng: 73.8839 // Swargate, Pune longitude\n};\nconst GoogleMapComponent = () => {\n  _s();\n  console.log(\"GoogleMapComponent>>>> \");\n  const [latitude, setLatitude] = useState();\n  const [longitude, setLongitude] = useState();\n  const [centerLocation, setCenterLocation] = useState();\n\n  // const geo = navigator.geolocation\n  // geo.getCurrentPosition(userCoords)  \n  // function userCoords(position) {\n  //   console.log(\"function called....\")\n  //   let userLatitude = position.coords.latitude\n  //   let userLongitude = position.coords.longitude\n  //   // console.log(\"Latitude: \", userLatitude);\n  //   // console.log(\"Longitude: \", userLongitude);\n  //   setLatitude(userLatitude)\n  //   setLongitude(userLongitude)\n  //   const c = {\n  //     lat: userLatitude,  // Swargate, Pune latitude\n  //     lng: userLongitude,  // Swargate, Pune longitude\n  //   };\n  //   setCenterLocation(c);\n  // }\n\n  useEffect(() => {\n    console.log(\"useeffect called.....\");\n    const geo = navigator.geolocation;\n    geo.getCurrentPosition(position => {\n      console.log(\"function called....\");\n      let userLatitude = position.coords.latitude;\n      let userLongitude = position.coords.longitude;\n      // console.log(\"Latitude: \", userLatitude);\n      // console.log(\"Longitude: \", userLongitude);\n      setLatitude(userLatitude);\n      setLongitude(userLongitude);\n      const c = {\n        lat: userLatitude,\n        // Swargate, Pune latitude\n        lng: userLongitude // Swargate, Pune longitude\n      };\n      setCenterLocation(c);\n    });\n    console.log(\"useeffect completed.....\");\n  }, []);\n\n  // useEffect(() => {\n  //   console.log(\"useeffect called.....\")\n  //   const geo = navigator.geolocation;\n\n  //   if (geo) {\n  //     // Watch user's position and update state when it changes\n  //     const watcher = geo.watchPosition(\n  //       (position) => {\n  //         setLatitude(position.coords.latitude);\n  //         setLongitude(position.coords.longitude);\n  //         const c = {\n  //           lat: position.coords.latitude,  // Swargate, Pune latitude\n  //           lng: position.coords.longitude,  // Swargate, Pune longitude\n  //         };\n  //         setCenterLocation(c);\n  //         console.log(\"got points.... \",centerLocation)\n  //       },\n  //       (error) => console.error('Error getting location:', error),\n  //       {\n  //         enableHighAccuracy: true, // Optional: improves accuracy\n  //         timeout: 5000,            // Optional: maximum wait time for a position\n  //         maximumAge: 0             // Optional: ensures you get fresh data\n  //       }\n  //     );\n\n  //     // Cleanup function to stop watching when component unmounts\n  //     return () => geo.clearWatch(watcher);\n  //   } else {\n  //     console.error(\"Geolocation is not supported by this browser.\");\n  //   }\n  // }, []); \n\n  console.log(\"centerLocation>>>>>> \", centerLocation);\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    googleMapsApiKey: 'AIzaSyA3E5Oa68_J4t4-4530RD0h_IA532wZn_8' // Replace with your Google Maps API Key\n  });\n  const [map, setMap] = useState(null);\n  const onLoad = useCallback(function callback(map) {\n    console.log(\"onload called...\", centerLocation);\n    const bounds = new window.google.maps.LatLngBounds(centerLocation);\n    map.fitBounds(bounds);\n    setMap(map);\n  }, []);\n  const onUnmount = useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n  console.log(\"isLoaded: \", isLoaded, \"    centerLocation: \", centerLocation);\n  return isLoaded && centerLocation ? /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: centerLocation,\n      zoom: 13,\n      onLoad: onLoad,\n      onUnmount: onUnmount,\n      children: /*#__PURE__*/_jsxDEV(Marker, {\n        position: centerLocation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading Google Map...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s(GoogleMapComponent, \"RDr3CCi72aOBAb4Y47x/O6aUmNM=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = GoogleMapComponent;\nexport default GoogleMapComponent;\nvar _c;\n$RefreshReg$(_c, \"GoogleMapComponent\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","GoogleMap","useJsApiLoader","Marker","GPSLiveLocation","jsxDEV","_jsxDEV","containerStyle","width","height","border","marginTop","center","lat","lng","GoogleMapComponent","_s","console","log","latitude","setLatitude","longitude","setLongitude","centerLocation","setCenterLocation","geo","navigator","geolocation","getCurrentPosition","position","userLatitude","coords","userLongitude","c","isLoaded","googleMapsApiKey","map","setMap","onLoad","callback","bounds","window","google","maps","LatLngBounds","fitBounds","onUnmount","style","display","flexDirection","alignItems","children","mapContainerStyle","zoom","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/TYProject/mobiletracker/mobiletracker/frontend/src/components/GoogleMapComponent.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport { GoogleMap, useJsApiLoader, Marker } from '@react-google-maps/api';\r\nimport GPSLiveLocation from '../components/GPSLiveLocation'; // Adjusted import path\r\n\r\nconst containerStyle = {\r\n  width: '100%',\r\n  height: '750px',\r\n  border: '0',\r\n  marginTop: '20px',\r\n};\r\n\r\nconst center = {\r\n  lat: 18.4597,  // Swargate, Pune latitude\r\n  lng: 73.8839,  // Swargate, Pune longitude\r\n};\r\n\r\n\r\n\r\nconst GoogleMapComponent = () => {\r\n\r\n  console.log(\"GoogleMapComponent>>>> \");\r\n\r\n  const [latitude, setLatitude] = useState()\r\nconst [longitude, setLongitude] = useState()\r\n\r\nconst [centerLocation, setCenterLocation] = useState()\r\n\r\n// const geo = navigator.geolocation\r\n// geo.getCurrentPosition(userCoords)  \r\n// function userCoords(position) {\r\n//   console.log(\"function called....\")\r\n//   let userLatitude = position.coords.latitude\r\n//   let userLongitude = position.coords.longitude\r\n//   // console.log(\"Latitude: \", userLatitude);\r\n//   // console.log(\"Longitude: \", userLongitude);\r\n//   setLatitude(userLatitude)\r\n//   setLongitude(userLongitude)\r\n//   const c = {\r\n//     lat: userLatitude,  // Swargate, Pune latitude\r\n//     lng: userLongitude,  // Swargate, Pune longitude\r\n//   };\r\n//   setCenterLocation(c);\r\n// }\r\n\r\nuseEffect(()=>{\r\n  console.log(\"useeffect called.....\")\r\n  const geo = navigator.geolocation\r\ngeo.getCurrentPosition((position)=>{\r\n  console.log(\"function called....\")\r\n  let userLatitude = position.coords.latitude\r\n  let userLongitude = position.coords.longitude\r\n  // console.log(\"Latitude: \", userLatitude);\r\n  // console.log(\"Longitude: \", userLongitude);\r\n  setLatitude(userLatitude)\r\n  setLongitude(userLongitude)\r\n  const c = {\r\n    lat: userLatitude,  // Swargate, Pune latitude\r\n    lng: userLongitude,  // Swargate, Pune longitude\r\n  };\r\n  setCenterLocation(c);\r\n\r\n})  \r\nconsole.log(\"useeffect completed.....\")\r\n}, []);\r\n\r\n\r\n\r\n// useEffect(() => {\r\n//   console.log(\"useeffect called.....\")\r\n//   const geo = navigator.geolocation;\r\n\r\n//   if (geo) {\r\n//     // Watch user's position and update state when it changes\r\n//     const watcher = geo.watchPosition(\r\n//       (position) => {\r\n//         setLatitude(position.coords.latitude);\r\n//         setLongitude(position.coords.longitude);\r\n//         const c = {\r\n//           lat: position.coords.latitude,  // Swargate, Pune latitude\r\n//           lng: position.coords.longitude,  // Swargate, Pune longitude\r\n//         };\r\n//         setCenterLocation(c);\r\n//         console.log(\"got points.... \",centerLocation)\r\n//       },\r\n//       (error) => console.error('Error getting location:', error),\r\n//       {\r\n//         enableHighAccuracy: true, // Optional: improves accuracy\r\n//         timeout: 5000,            // Optional: maximum wait time for a position\r\n//         maximumAge: 0             // Optional: ensures you get fresh data\r\n//       }\r\n//     );\r\n\r\n//     // Cleanup function to stop watching when component unmounts\r\n//     return () => geo.clearWatch(watcher);\r\n//   } else {\r\n//     console.error(\"Geolocation is not supported by this browser.\");\r\n//   }\r\n// }, []); \r\n\r\nconsole.log(\"centerLocation>>>>>> \",centerLocation)\r\n\r\n  const { isLoaded } = useJsApiLoader({\r\n    googleMapsApiKey: 'AIzaSyA3E5Oa68_J4t4-4530RD0h_IA532wZn_8', // Replace with your Google Maps API Key\r\n  });\r\n\r\n  const [map, setMap] = useState(null);\r\n\r\n  const onLoad = useCallback(function callback(map) {\r\n    console.log(\"onload called...\", centerLocation)\r\n    const bounds = new window.google.maps.LatLngBounds(centerLocation);\r\n    map.fitBounds(bounds);\r\n    setMap(map);\r\n  }, []);\r\n\r\n  const onUnmount = useCallback(function callback(map) {\r\n    setMap(null);\r\n  }, []);\r\n\r\n  console.log(\"isLoaded: \", isLoaded,\"    centerLocation: \",centerLocation)\r\n  return isLoaded && centerLocation ? (\r\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n      <GoogleMap\r\n        mapContainerStyle={containerStyle}\r\n        center={centerLocation}\r\n        zoom={13}\r\n        onLoad={onLoad}\r\n        onUnmount={onUnmount}\r\n      >\r\n        {/* Add a marker at Swargate, Pune */}\r\n        <Marker position={centerLocation} />\r\n      </GoogleMap>\r\n\r\n      {/* Add GPSLiveLocation component with styling */}\r\n      {/* <div className=\"gps-live-location\" style={{ marginTop: '20px', padding: '10px', backgroundColor: 'white', boxShadow: '0 2px 5px rgba(0,0,0,0.2)', borderRadius: '5px', width: '90%' }}>\r\n        <h3 className=\"text-lg font-semibold\">Live GPS Location</h3>\r\n        <GPSLiveLocation />\r\n      </div> */}\r\n    </div>\r\n  ) : (\r\n    <div>Loading Google Map...</div>\r\n  );\r\n};\r\n\r\nexport default GoogleMapComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}